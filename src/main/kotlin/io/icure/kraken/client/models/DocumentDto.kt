/**
* iCure Cloud API Documentation
* Spring shop sample application
*
* The version of the OpenAPI document: v0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package io.icure.kraken.client.models

import io.icure.kraken.client.models.CodeStubDto
import io.icure.kraken.client.models.DelegationDto

import com.squareup.moshi.Json

/**
 * This entity is a root level object. It represents a Document. It is serialized in JSON and saved in the underlying CouchDB database.
 * @param id The Id of the document. We encourage using either a v4 UUID or a HL7 Id.
 * @param tags A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
 * @param codes A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
 * @param otherUtis Extra Uniform Type Identifiers
 * @param secretForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.
 * @param cryptedForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.
 * @param delegations When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well
 * @param encryptionKeys When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation
 * @param rev The revision of the document in the database, used for conflict management / optimistic locking.
 * @param created The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param modified The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param author The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param responsible The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param medicalLocationId The id of the medical location where this entity was created.
 * @param endOfLife Soft delete (unix epoch in ms) timestamp of the object.
 * @param deletionDate hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
 * @param objectStoreReference Reference in object store
 * @param documentLocation Location of the document
 * @param documentType The type of document, ex: admission, clinical path, document report,invoice, etc.
 * @param documentStatus The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc.
 * @param externalUri When the document is stored in an external repository, this is the uri of the document in that repository
 * @param mainUti The main Uniform Type Identifier of the document (https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE)
 * @param name Name of the document
 * @param version The document version
 * @param storedICureDocumentId The ICureDocument (Form, Contact, ...) that has been used to generate the document
 * @param externalUuid A unique external id (from another external source).
 * @param size Size of the document file
 * @param hash Hashed version of the document
 * @param openingContactId Id of the contact during which the document was created
 * @param attachmentId Id of attachment to this document
 * @param encryptedAttachment 
 * @param decryptedAttachment 
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

data class DocumentDto (
    /* The Id of the document. We encourage using either a v4 UUID or a HL7 Id. */
    @Json(name = "id")
    val id: kotlin.String,
    /* A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags. */
    @Json(name = "tags")
    val tags: kotlin.collections.List<CodeStubDto>,
    /* A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes */
    @Json(name = "codes")
    val codes: kotlin.collections.List<CodeStubDto>,
    /* Extra Uniform Type Identifiers */
    @Json(name = "otherUtis")
    val otherUtis: kotlin.collections.List<kotlin.String>,
    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space. */
    @Json(name = "secretForeignKeys")
    val secretForeignKeys: kotlin.collections.List<kotlin.String>,
    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys. */
    @Json(name = "cryptedForeignKeys")
    val cryptedForeignKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>>,
    /* When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well */
    @Json(name = "delegations")
    val delegations: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>>,
    /* When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation */
    @Json(name = "encryptionKeys")
    val encryptionKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>>,
    /* The revision of the document in the database, used for conflict management / optimistic locking. */
    @Json(name = "rev")
    val rev: kotlin.String? = null,
    /* The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "created")
    val created: kotlin.Long? = null,
    /* The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "modified")
    val modified: kotlin.Long? = null,
    /* The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "author")
    val author: kotlin.String? = null,
    /* The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "responsible")
    val responsible: kotlin.String? = null,
    /* The id of the medical location where this entity was created. */
    @Json(name = "medicalLocationId")
    val medicalLocationId: kotlin.String? = null,
    /* Soft delete (unix epoch in ms) timestamp of the object. */
    @Json(name = "endOfLife")
    val endOfLife: kotlin.Long? = null,
    /* hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called. */
    @Json(name = "deletionDate")
    val deletionDate: kotlin.Long? = null,
    /* Reference in object store */
    @Json(name = "objectStoreReference")
    val objectStoreReference: kotlin.String? = null,
    /* Location of the document */
    @Json(name = "documentLocation")
    val documentLocation: DocumentDto.DocumentLocation? = null,
    /* The type of document, ex: admission, clinical path, document report,invoice, etc. */
    @Json(name = "documentType")
    val documentType: DocumentDto.DocumentType? = null,
    /* The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc. */
    @Json(name = "documentStatus")
    val documentStatus: DocumentDto.DocumentStatus? = null,
    /* When the document is stored in an external repository, this is the uri of the document in that repository */
    @Json(name = "externalUri")
    val externalUri: kotlin.String? = null,
    /* The main Uniform Type Identifier of the document (https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE) */
    @Json(name = "mainUti")
    val mainUti: kotlin.String? = null,
    /* Name of the document */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* The document version */
    @Json(name = "version")
    val version: kotlin.String? = null,
    /* The ICureDocument (Form, Contact, ...) that has been used to generate the document */
    @Json(name = "storedICureDocumentId")
    val storedICureDocumentId: kotlin.String? = null,
    /* A unique external id (from another external source). */
    @Json(name = "externalUuid")
    val externalUuid: kotlin.String? = null,
    /* Size of the document file */
    @Json(name = "size")
    val size: kotlin.Long? = null,
    /* Hashed version of the document */
    @Json(name = "hash")
    val hash: kotlin.String? = null,
    /* Id of the contact during which the document was created */
    @Json(name = "openingContactId")
    val openingContactId: kotlin.String? = null,
    /* Id of attachment to this document */
    @Json(name = "attachmentId")
    val attachmentId: kotlin.String? = null,
    @Json(name = "encryptedAttachment")
    val encryptedAttachment: kotlin.collections.List<kotlin.ByteArray>? = null,
    @Json(name = "decryptedAttachment")
    val decryptedAttachment: kotlin.collections.List<kotlin.ByteArray>? = null,
    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */
    @Json(name = "encryptedSelf")
    val encryptedSelf: kotlin.String? = null
) {

    /**
     * Location of the document
     * Values: annex,body
     */
    enum class DocumentLocation(val value: kotlin.String) {
        @Json(name = "annex") annex("annex"),
        @Json(name = "body") body("body");
    }
    /**
     * The type of document, ex: admission, clinical path, document report,invoice, etc.
     * Values: admission,alert,bvtSample,clinicalpath,clinicalsummary,contactreport,quote,invoice,death,discharge,dischargereport,ebirthBabyMedicalform,ebirthBabyNotification,ebirthMotherMedicalform,ebirthMotherNotification,ecareSafeConsultation,epidemiology,intervention,labrequest,labresult,medicaladvisoragreement,medicationschemeelement,note,notification,pharmaceuticalprescription,prescription,productdelivery,quickdischargereport,radiationexposuremonitoring,referral,report,request,result,sumehr,telemonitoring,template,templateAdmin,treatmentsuspension,vaccination
     */
    enum class DocumentType(val value: kotlin.String) {
        @Json(name = "admission") admission("admission"),
        @Json(name = "alert") alert("alert"),
        @Json(name = "bvt_sample") bvtSample("bvt_sample"),
        @Json(name = "clinicalpath") clinicalpath("clinicalpath"),
        @Json(name = "clinicalsummary") clinicalsummary("clinicalsummary"),
        @Json(name = "contactreport") contactreport("contactreport"),
        @Json(name = "quote") quote("quote"),
        @Json(name = "invoice") invoice("invoice"),
        @Json(name = "death") death("death"),
        @Json(name = "discharge") discharge("discharge"),
        @Json(name = "dischargereport") dischargereport("dischargereport"),
        @Json(name = "ebirth_baby_medicalform") ebirthBabyMedicalform("ebirth_baby_medicalform"),
        @Json(name = "ebirth_baby_notification") ebirthBabyNotification("ebirth_baby_notification"),
        @Json(name = "ebirth_mother_medicalform") ebirthMotherMedicalform("ebirth_mother_medicalform"),
        @Json(name = "ebirth_mother_notification") ebirthMotherNotification("ebirth_mother_notification"),
        @Json(name = "ecare_safe_consultation") ecareSafeConsultation("ecare_safe_consultation"),
        @Json(name = "epidemiology") epidemiology("epidemiology"),
        @Json(name = "intervention") intervention("intervention"),
        @Json(name = "labrequest") labrequest("labrequest"),
        @Json(name = "labresult") labresult("labresult"),
        @Json(name = "medicaladvisoragreement") medicaladvisoragreement("medicaladvisoragreement"),
        @Json(name = "medicationschemeelement") medicationschemeelement("medicationschemeelement"),
        @Json(name = "note") note("note"),
        @Json(name = "notification") notification("notification"),
        @Json(name = "pharmaceuticalprescription") pharmaceuticalprescription("pharmaceuticalprescription"),
        @Json(name = "prescription") prescription("prescription"),
        @Json(name = "productdelivery") productdelivery("productdelivery"),
        @Json(name = "quickdischargereport") quickdischargereport("quickdischargereport"),
        @Json(name = "radiationexposuremonitoring") radiationexposuremonitoring("radiationexposuremonitoring"),
        @Json(name = "referral") referral("referral"),
        @Json(name = "report") report("report"),
        @Json(name = "request") request("request"),
        @Json(name = "result") result("result"),
        @Json(name = "sumehr") sumehr("sumehr"),
        @Json(name = "telemonitoring") telemonitoring("telemonitoring"),
        @Json(name = "template") template("template"),
        @Json(name = "template_admin") templateAdmin("template_admin"),
        @Json(name = "treatmentsuspension") treatmentsuspension("treatmentsuspension"),
        @Json(name = "vaccination") vaccination("vaccination");
    }
    /**
     * The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc.
     * Values: draft,finalized,pendingReview,reviewed,pendingSignature,signed,canceled,sent,delivered
     */
    enum class DocumentStatus(val value: kotlin.String) {
        @Json(name = "draft") draft("draft"),
        @Json(name = "finalized") finalized("finalized"),
        @Json(name = "pending_review") pendingReview("pending_review"),
        @Json(name = "reviewed") reviewed("reviewed"),
        @Json(name = "pending_signature") pendingSignature("pending_signature"),
        @Json(name = "signed") signed("signed"),
        @Json(name = "canceled") canceled("canceled"),
        @Json(name = "sent") sent("sent"),
        @Json(name = "delivered") delivered("delivered");
    }
}

