/**
* iCure Cloud API Documentation
* Spring shop sample application
*
* The version of the OpenAPI document: v0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package io.icure.kraken.client.models

import io.icure.kraken.client.models.CodeStubDto
import io.icure.kraken.client.models.DelegationDto
import io.icure.kraken.client.models.ServiceDto
import io.icure.kraken.client.models.SubContactDto

import com.squareup.moshi.Json

/**
 * This entity is a root-level object. It represents a contact. It is serialized in JSON and saved in the underlying icure-contact CouchDB database. The contact is the entity that records the medical information about the patient chronologically. A visit to the patient's house, a consultation at the practice, a phone call between the patient and the healthcare party or integrating lab reports into the medical file are examples of when a contact can be recorded. A contact can occur with or without direct interaction between the patient and the healthcare party. For example, when a healthcare party encodes data received from laboratory's test result, this is done in the absence of a patient. A contact groups together pieces of information collected during one single event, for one single patient and for one or more healthcare parties. Patient's complaints, the diagnosis of a new problem, a surgical procedure, etc. are collected inside a contact. The main sub-element of the contact is the service. Each atomic piece of information collected during a contact is a service and is stored inside the services list of a contact. 
 * @param id the Id of the contact. We encourage using either a v4 UUID or a HL7 Id.
 * @param tags A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
 * @param codes A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
 * @param subContacts Set of all sub-contacts recorded during the given contact. Sub-contacts are used to link services embedded inside this contact to healthcare elements, healthcare approaches and/or forms.
 * @param services Set of all services provided to the patient during the contact.
 * @param secretForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.
 * @param cryptedForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.
 * @param delegations When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well
 * @param encryptionKeys When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation
 * @param rev the revision of the contact in the database, used for conflict management / optimistic locking.
 * @param created The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param modified The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param author The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param responsible The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param medicalLocationId The id of the medical location where this entity was created.
 * @param endOfLife Soft delete (unix epoch in ms) timestamp of the object.
 * @param deletionDate hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
 * @param groupId Separate contacts can merged in one logical contact if they share the same groupId. When a contact must be split to selectively assign rights to healthcare parties, the split contacts all share the same groupId
 * @param openingDate The date (YYYYMMDDhhmmss) of the start of the contact.
 * @param closingDate The date (YYYYMMDDhhmmss) marking the end of the contact.
 * @param descr Description of the contact
 * @param location Location where the contact was recorded.
 * @param externalId An external (from another source) id with no guarantee or requirement for unicity.
 * @param encounterType 
 * @param healthcarePartyId 
 * @param modifiedContactId 
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

data class ContactDto (
    /* the Id of the contact. We encourage using either a v4 UUID or a HL7 Id. */
    @Json(name = "id")
    val id: kotlin.String,
    /* A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags. */
    @Json(name = "tags")
    val tags: kotlin.collections.List<CodeStubDto>,
    /* A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes */
    @Json(name = "codes")
    val codes: kotlin.collections.List<CodeStubDto>,
    /* Set of all sub-contacts recorded during the given contact. Sub-contacts are used to link services embedded inside this contact to healthcare elements, healthcare approaches and/or forms. */
    @Json(name = "subContacts")
    val subContacts: kotlin.collections.List<SubContactDto>,
    /* Set of all services provided to the patient during the contact. */
    @Json(name = "services")
    val services: kotlin.collections.List<ServiceDto>,
    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space. */
    @Json(name = "secretForeignKeys")
    val secretForeignKeys: kotlin.collections.List<kotlin.String>,
    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys. */
    @Json(name = "cryptedForeignKeys")
    val cryptedForeignKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>>,
    /* When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well */
    @Json(name = "delegations")
    val delegations: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>>,
    /* When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation */
    @Json(name = "encryptionKeys")
    val encryptionKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>>,
    /* the revision of the contact in the database, used for conflict management / optimistic locking. */
    @Json(name = "rev")
    val rev: kotlin.String? = null,
    /* The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "created")
    val created: kotlin.Long? = null,
    /* The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "modified")
    val modified: kotlin.Long? = null,
    /* The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "author")
    val author: kotlin.String? = null,
    /* The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server. */
    @Json(name = "responsible")
    val responsible: kotlin.String? = null,
    /* The id of the medical location where this entity was created. */
    @Json(name = "medicalLocationId")
    val medicalLocationId: kotlin.String? = null,
    /* Soft delete (unix epoch in ms) timestamp of the object. */
    @Json(name = "endOfLife")
    val endOfLife: kotlin.Long? = null,
    /* hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called. */
    @Json(name = "deletionDate")
    val deletionDate: kotlin.Long? = null,
    /* Separate contacts can merged in one logical contact if they share the same groupId. When a contact must be split to selectively assign rights to healthcare parties, the split contacts all share the same groupId */
    @Json(name = "groupId")
    val groupId: kotlin.String? = null,
    /* The date (YYYYMMDDhhmmss) of the start of the contact. */
    @Json(name = "openingDate")
    val openingDate: kotlin.Long? = null,
    /* The date (YYYYMMDDhhmmss) marking the end of the contact. */
    @Json(name = "closingDate")
    val closingDate: kotlin.Long? = null,
    /* Description of the contact */
    @Json(name = "descr")
    val descr: kotlin.String? = null,
    /* Location where the contact was recorded. */
    @Json(name = "location")
    val location: kotlin.String? = null,
    /* An external (from another source) id with no guarantee or requirement for unicity. */
    @Json(name = "externalId")
    val externalId: kotlin.String? = null,
    @Json(name = "encounterType")
    val encounterType: CodeStubDto? = null,
    @Json(name = "healthcarePartyId")
    @Deprecated(message = "This property is deprecated.")
    val healthcarePartyId: kotlin.String? = null,
    @Json(name = "modifiedContactId")
    @Deprecated(message = "This property is deprecated.")
    val modifiedContactId: kotlin.String? = null,
    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */
    @Json(name = "encryptedSelf")
    val encryptedSelf: kotlin.String? = null
)

