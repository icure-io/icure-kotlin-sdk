/**
* iCure Cloud API Documentation
* Spring shop sample application
*
* The version of the OpenAPI document: v0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package io.icure.kraken.client.models

import io.icure.kraken.client.models.EIDItem

import com.squareup.moshi.Json

/**
 * 
 * @param codeNomenclature 
 * @param units 
 * @param reimbursedAmount 
 * @param patientFee 
 * @param doctorSupplement 
 * @param dateCode 
 * @param relatedCode 
 * @param eidItem 
 * @param insuranceRef 
 * @param insuranceRefDate 
 * @param sideCode 
 * @param timeOfDay 
 * @param override3rdPayerCode 
 * @param gnotionNihii 
 * @param derogationMaxNumber 
 * @param prescriberNorm 
 * @param prescriberNihii 
 * @param prescriptionDate 
 * @param personalInterventionCoveredByThirdPartyCode 
 * @param doctorIdentificationNumber 
 * @param invoiceRef 
 * @param percentNorm 
 */

data class InvoiceItem (
    @Json(name = "codeNomenclature")
    val codeNomenclature: kotlin.Long,
    @Json(name = "units")
    val units: kotlin.Int,
    @Json(name = "reimbursedAmount")
    val reimbursedAmount: kotlin.Long,
    @Json(name = "patientFee")
    val patientFee: kotlin.Long,
    @Json(name = "doctorSupplement")
    val doctorSupplement: kotlin.Long,
    @Json(name = "dateCode")
    val dateCode: kotlin.Long? = null,
    @Json(name = "relatedCode")
    val relatedCode: kotlin.Long? = null,
    @Json(name = "eidItem")
    val eidItem: EIDItem? = null,
    @Json(name = "insuranceRef")
    val insuranceRef: kotlin.String? = null,
    @Json(name = "insuranceRefDate")
    val insuranceRefDate: kotlin.Long? = null,
    @Json(name = "sideCode")
    val sideCode: InvoiceItem.SideCode? = null,
    @Json(name = "timeOfDay")
    val timeOfDay: InvoiceItem.TimeOfDay? = null,
    @Json(name = "override3rdPayerCode")
    val override3rdPayerCode: kotlin.Int? = null,
    @Json(name = "gnotionNihii")
    val gnotionNihii: kotlin.String? = null,
    @Json(name = "derogationMaxNumber")
    val derogationMaxNumber: InvoiceItem.DerogationMaxNumber? = null,
    @Json(name = "prescriberNorm")
    val prescriberNorm: InvoiceItem.PrescriberNorm? = null,
    @Json(name = "prescriberNihii")
    val prescriberNihii: kotlin.String? = null,
    @Json(name = "prescriptionDate")
    val prescriptionDate: kotlin.Long? = null,
    @Json(name = "personalInterventionCoveredByThirdPartyCode")
    val personalInterventionCoveredByThirdPartyCode: kotlin.Int? = null,
    @Json(name = "doctorIdentificationNumber")
    val doctorIdentificationNumber: kotlin.String? = null,
    @Json(name = "invoiceRef")
    val invoiceRef: kotlin.String? = null,
    @Json(name = "percentNorm")
    val percentNorm: InvoiceItem.PercentNorm? = null
) {

    /**
     * 
     * Values: none,left,right
     */
    enum class SideCode(val value: kotlin.String) {
        @Json(name = "None") none("None"),
        @Json(name = "Left") left("Left"),
        @Json(name = "Right") right("Right");
    }
    /**
     * 
     * Values: other,night,weekend,bankholiday,urgent
     */
    enum class TimeOfDay(val value: kotlin.String) {
        @Json(name = "Other") other("Other"),
        @Json(name = "Night") night("Night"),
        @Json(name = "Weekend") weekend("Weekend"),
        @Json(name = "Bankholiday") bankholiday("Bankholiday"),
        @Json(name = "Urgent") urgent("Urgent");
    }
    /**
     * 
     * Values: other,derogationMaxNumber,otherPrescription,secondPrestationOfDay,thirdAndNextPrestationOfDay
     */
    enum class DerogationMaxNumber(val value: kotlin.String) {
        @Json(name = "Other") other("Other"),
        @Json(name = "DerogationMaxNumber") derogationMaxNumber("DerogationMaxNumber"),
        @Json(name = "OtherPrescription") otherPrescription("OtherPrescription"),
        @Json(name = "SecondPrestationOfDay") secondPrestationOfDay("SecondPrestationOfDay"),
        @Json(name = "ThirdAndNextPrestationOfDay") thirdAndNextPrestationOfDay("ThirdAndNextPrestationOfDay");
    }
    /**
     * 
     * Values: none,onePrescriber,selfPrescriber,addedCode,manyPrescribers
     */
    enum class PrescriberNorm(val value: kotlin.String) {
        @Json(name = "None") none("None"),
        @Json(name = "OnePrescriber") onePrescriber("OnePrescriber"),
        @Json(name = "SelfPrescriber") selfPrescriber("SelfPrescriber"),
        @Json(name = "AddedCode") addedCode("AddedCode"),
        @Json(name = "ManyPrescribers") manyPrescribers("ManyPrescribers");
    }
    /**
     * 
     * Values: none,surgicalAid1,surgicalAid2,reducedFee,ah1n1,halfPriceSecondAct,invoiceException,forInformation
     */
    enum class PercentNorm(val value: kotlin.String) {
        @Json(name = "None") none("None"),
        @Json(name = "SurgicalAid1") surgicalAid1("SurgicalAid1"),
        @Json(name = "SurgicalAid2") surgicalAid2("SurgicalAid2"),
        @Json(name = "ReducedFee") reducedFee("ReducedFee"),
        @Json(name = "Ah1n1") ah1n1("Ah1n1"),
        @Json(name = "HalfPriceSecondAct") halfPriceSecondAct("HalfPriceSecondAct"),
        @Json(name = "InvoiceException") invoiceException("InvoiceException"),
        @Json(name = "ForInformation") forInformation("ForInformation");
    }
}

