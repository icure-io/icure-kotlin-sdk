/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

import io.swagger.client.models.AddressDto

import io.swagger.client.models.CodeStubDto
import io.swagger.client.models.DelegationDto
import io.swagger.client.models.EmploymentInfoDto
import io.swagger.client.models.FinancialInstitutionInformationDto
import io.swagger.client.models.InsurabilityDto
import io.swagger.client.models.MedicalHouseContractDto
import io.swagger.client.models.PartnershipDto
import io.swagger.client.models.PatientHealthCarePartyDto
import io.swagger.client.models.PropertyStubDto
import io.swagger.client.models.SchoolingInfoDto

/**
 *
 * @param id
 * @param rev
 * @param created
 * @param modified
 * @param author
 * @param responsible
 * @param medicalLocationId
 * @param tags
 * @param codes
 * @param endOfLife
 * @param deletionDate
 * @param firstName
 * @param lastName
 * @param companyName
 * @param languages
 * @param addresses
 * @param civility
 * @param gender
 * @param mergeToPatientId
 * @param mergedIds
 * @param nonDuplicateIds
 * @param encryptedAdministrativesDocuments
 * @param alias
 * @param active
 * @param deactivationReason
 * @param ssin
 * @param maidenName
 * @param spouseName
 * @param partnerName
 * @param personalStatus
 * @param dateOfBirth
 * @param dateOfDeath
 * @param timestampOfLatestEidReading
 * @param placeOfBirth
 * @param placeOfDeath
 * @param education
 * @param profession
 * @param note
 * @param administrativeNote
 * @param comment
 * @param warning
 * @param nationality
 * @param preferredUserId
 * @param picture
 * @param externalId
 * @param insurabilities
 * @param partnerships
 * @param patientHealthCareParties
 * @param financialInstitutionInformation
 * @param medicalHouseContracts
 * @param parameters
 * @param patientProfessions
 * @param fatherBirthCountry
 * @param birthCountry
 * @param nativeCountry
 * @param socialStatus
 * @param mainSourceOfIncome
 * @param schoolingInfos
 * @param employementInfos
 * @param properties
 * @param hcPartyKeys
 * @param privateKeyShamirPartitions
 * @param publicKey
 * @param secretForeignKeys
 * @param cryptedForeignKeys
 * @param delegations
 * @param encryptionKeys
 * @param encryptedSelf
 */
data class PatientDto (
    val id: kotlin.String,
    val tags: kotlin.Array<CodeStubDto>,
    val codes: kotlin.Array<CodeStubDto>,
    val languages: kotlin.Array<kotlin.String>,
    val addresses: kotlin.Array<AddressDto>,
    val mergedIds: kotlin.Array<kotlin.String>,
    val nonDuplicateIds: kotlin.Array<kotlin.String>,
    val encryptedAdministrativesDocuments: kotlin.Array<kotlin.String>,
    val active: kotlin.Boolean,
    val deactivationReason: PatientDto.DeactivationReason,
    val insurabilities: kotlin.Array<InsurabilityDto>,
    val partnerships: kotlin.Array<PartnershipDto>,
    val patientHealthCareParties: kotlin.Array<PatientHealthCarePartyDto>,
    val financialInstitutionInformation: kotlin.Array<FinancialInstitutionInformationDto>,
    val medicalHouseContracts: kotlin.Array<MedicalHouseContractDto>,
    val parameters: kotlin.collections.Map<kotlin.String, kotlin.Array<kotlin.String>>,
    val patientProfessions: kotlin.Array<CodeStubDto>,
    val schoolingInfos: kotlin.Array<SchoolingInfoDto>,
    val employementInfos: kotlin.Array<EmploymentInfoDto>,
    val properties: kotlin.Array<PropertyStubDto>,
    val hcPartyKeys: kotlin.collections.Map<kotlin.String, kotlin.Array<kotlin.String>>,
    val privateKeyShamirPartitions: kotlin.collections.Map<kotlin.String, kotlin.String>,
    val secretForeignKeys: kotlin.Array<kotlin.String>,
    val cryptedForeignKeys: kotlin.collections.Map<kotlin.String, kotlin.Array<DelegationDto>>,
    val delegations: kotlin.collections.Map<kotlin.String, kotlin.Array<DelegationDto>>,
    val encryptionKeys: kotlin.collections.Map<kotlin.String, kotlin.Array<DelegationDto>>
,
    val rev: kotlin.String? = null,
    val created: kotlin.Long? = null,
    val modified: kotlin.Long? = null,
    val author: kotlin.String? = null,
    val responsible: kotlin.String? = null,
    val medicalLocationId: kotlin.String? = null,
    val endOfLife: kotlin.Long? = null,
    val deletionDate: kotlin.Long? = null,
    val firstName: kotlin.String? = null,
    val lastName: kotlin.String? = null,
    val companyName: kotlin.String? = null,
    val civility: kotlin.String? = null,
    val gender: PatientDto.Gender? = null,
    val mergeToPatientId: kotlin.String? = null,
    val alias: kotlin.String? = null,
    val ssin: kotlin.String? = null,
    val maidenName: kotlin.String? = null,
    val spouseName: kotlin.String? = null,
    val partnerName: kotlin.String? = null,
    val personalStatus: PatientDto.PersonalStatus? = null,
    val dateOfBirth: kotlin.Int? = null,
    val dateOfDeath: kotlin.Int? = null,
    val timestampOfLatestEidReading: kotlin.Long? = null,
    val placeOfBirth: kotlin.String? = null,
    val placeOfDeath: kotlin.String? = null,
    val education: kotlin.String? = null,
    val profession: kotlin.String? = null,
    val note: kotlin.String? = null,
    val administrativeNote: kotlin.String? = null,
    val comment: kotlin.String? = null,
    val warning: kotlin.String? = null,
    val nationality: kotlin.String? = null,
    val preferredUserId: kotlin.String? = null,
    val picture: kotlin.Array<ByteArray>? = null,
    val externalId: kotlin.String? = null,
    val fatherBirthCountry: CodeStubDto? = null,
    val birthCountry: CodeStubDto? = null,
    val nativeCountry: CodeStubDto? = null,
    val socialStatus: CodeStubDto? = null,
    val mainSourceOfIncome: CodeStubDto? = null,
    val publicKey: kotlin.String? = null,
    val encryptedSelf: kotlin.String? = null
) {
    /**
    *
    * Values: m,f,i,c,y,x,u
    */
    enum class Gender(val value: kotlin.String){
        m("M"),
        f("F"),
        i("I"),
        c("C"),
        y("Y"),
        x("X"),
        u("U");
    }
    /**
    *
    * Values: deceased,moved,otherDoctor,retired,noContact,unknown,none
    */
    enum class DeactivationReason(val value: kotlin.String){
        deceased("deceased"),
        moved("moved"),
        otherDoctor("other_doctor"),
        retired("retired"),
        noContact("no_contact"),
        unknown("unknown"),
        none("none");
    }
    /**
    *
    * Values: single,inCouple,married,separated,divorced,divorcing,widowed,widower,complicated,unknown,contract,other
    */
    enum class PersonalStatus(val value: kotlin.String){
        single("single"),
        inCouple("in_couple"),
        married("married"),
        separated("separated"),
        divorced("divorced"),
        divorcing("divorcing"),
        widowed("widowed"),
        widower("widower"),
        complicated("complicated"),
        unknown("unknown"),
        contract("contract"),
        other("other");
    }
}
