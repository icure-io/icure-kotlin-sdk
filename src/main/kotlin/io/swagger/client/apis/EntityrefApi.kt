/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.EntityReferenceDto

import io.swagger.client.infrastructure.*

class EntityrefApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create an entity reference
     * 
     * @param body  
     * @return EntityReferenceDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createEntityReference(body: EntityReferenceDto): EntityReferenceDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/entityref"
        )
        val response = request<EntityReferenceDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EntityReferenceDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find latest reference for a prefix 
     * 
     * @param prefix  
     * @return EntityReferenceDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getLatest(prefix: kotlin.String): EntityReferenceDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/entityref/latest/{prefix}".replace("{" + "prefix" + "}", "$prefix")
        )
        val response = request<EntityReferenceDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EntityReferenceDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
