/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AppointmentDto
import io.swagger.client.models.AppointmentImportDto
import io.swagger.client.models.EmailOrSmsMessageDto
import io.swagger.client.models.MikronoAppointmentTypeRestDto
import io.swagger.client.models.MikronoCredentialsDto
import io.swagger.client.models.UserDto

import io.swagger.client.infrastructure.*

class BemikronoApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Get appointments for patient
     *
     * @param calendarDate
     * @return kotlin.Array<AppointmentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun appointmentsByDate(calendarDate: kotlin.Long): kotlin.Array<AppointmentDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_mikrono/appointments/byDate/{calendarDate}".replace("{" + "calendarDate" + "}", "$calendarDate")
        )
        val response = request<kotlin.Array<AppointmentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AppointmentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get appointments for patient
     *
     * @param patientId
     * @param from  (optional)
     * @param to  (optional)
     * @return kotlin.Array<AppointmentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun appointmentsByPatient(patientId: kotlin.String, from: kotlin.Long? = null, to: kotlin.Long? = null): kotlin.Array<AppointmentDto> {
        val localVariableQuery: MultiValueMap = mapOf("from" to listOf("$from"), "to" to listOf("$to"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_mikrono/appointments/byPatient/{patientId}".replace("{" + "patientId" + "}", "$patientId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<AppointmentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AppointmentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body  (optional)
     * @return kotlin.Array<MikronoAppointmentTypeRestDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun createAppointmentTypes(body: kotlin.Array<MikronoAppointmentTypeRestDto>? = null): kotlin.Array<MikronoAppointmentTypeRestDto> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/be_mikrono/appointmentTypes"
        )
        val response = request<kotlin.Array<MikronoAppointmentTypeRestDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<MikronoAppointmentTypeRestDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create appointments for owner
     *
     * @param body
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun createAppointments(body: kotlin.Array<AppointmentImportDto>): kotlin.Array<kotlin.String> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/be_mikrono/appointments"
        )
        val response = request<kotlin.Array<kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Notify of an appointment change
     *
     * @param appointmentId
     * @param action
     * @return void
     */
    fun notify(appointmentId: kotlin.String, action: kotlin.String): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_mikrono/notify/{appointmentId}/{action}".replace("{" + "appointmentId" + "}", "$appointmentId").replace("{" + "action" + "}", "$action")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Set credentials for provided user
     *
     * @param body
     * @param userId
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun register(body: MikronoCredentialsDto, userId: kotlin.String): UserDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/be_mikrono/user/{userId}/register".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Send message using mikrono from logged user
     *
     * @param body
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun sendMessage(body: EmailOrSmsMessageDto): Unit {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/be_mikrono/sendMessage"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Set credentials for provided user
     *
     * @param body
     * @param userId
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setUserCredentials(body: MikronoCredentialsDto, userId: kotlin.String): UserDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/be_mikrono/user/{userId}/credentials".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
