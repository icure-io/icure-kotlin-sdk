/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DatabaseInitialisationDto
import io.swagger.client.models.GroupDto

import io.swagger.client.infrastructure.*

class GroupApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create a group
     * Create a new group and associated dbs.  The created group will be manageable by the users that belong to the same group as the one that called createGroup. Several tasks can be executed during the group creation like DB replications towards the created DBs, users creation and healthcare parties creation
     * @param body initialisationData is an object that contains the initial replications (target must be an internalTarget of value base, healthdata or patient) and the users and healthcare parties to be created
     * @param password The password of the group (can only contain digits, letters, - and _)
     * @param name The name of the group
     * @param id The id of the group, also used for subsequent authentication against the db (can only contain digits, letters, - and _)
     * @param server The server on which the group dbs will be created (optional)
     * @param q The number of shards for patient and healthdata dbs : 3-8 is a recommended range of value (optional)
     * @param n The number of replications for dbs : 3 is a recommended value (optional)
     * @return GroupDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createGroup(body: DatabaseInitialisationDto, password: kotlin.String, name: kotlin.String, id: kotlin.String, server: kotlin.String? = null, q: kotlin.Int? = null, n: kotlin.Int? = null): GroupDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "server" to listOf("$server"), "q" to listOf("$q"), "n" to listOf("$n"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("password" to password)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/group/{id}".replace("{" + "id" + "}", "$id"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<GroupDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GroupDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List groups
     * Create a new gorup with associated dbs
     * @return kotlin.Array<GroupDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listGroups(): kotlin.Array<GroupDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/group"
        )
        val response = request<kotlin.Array<GroupDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GroupDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List groups
     * Create a new gorup with associated dbs
     * @param id The id of the group
     * @param password The new password for the group (can only contain digits, letters, - and _)
     * @return GroupDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setGroupPassword(id: kotlin.String, password: kotlin.String): GroupDto {

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("password" to password)
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/group/{id}/password".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<GroupDto>(
                localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GroupDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
