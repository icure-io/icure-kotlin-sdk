/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DelegationDto
import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.FormDto
import io.swagger.client.models.FormTemplateDto
import io.swagger.client.models.IcureStubDto
import io.swagger.client.models.ListOfIdsDto

import io.swagger.client.infrastructure.*

class FormApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create a form with the current user
     * Returns an instance of created form.
     * @param body  
     * @return FormDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createForm(body: FormDto): FormDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/form"
        )
        val response = request<FormDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create a form template with the current user
     * Returns an instance of created form template.
     * @param body  
     * @return FormTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createFormTemplate(body: FormTemplateDto): FormTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/form/template"
        )
        val response = request<FormTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete a form template
     * 
     * @param formTemplateId  
     * @return DocIdentifier
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteFormTemplate(formTemplateId: kotlin.String): DocIdentifier {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/form/template/{formTemplateId}".replace("{" + "formTemplateId" + "}", "$formTemplateId")
        )
        val response = request<DocIdentifier>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocIdentifier
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete forms.
     * Response is a set containing the ID&#x27;s of deleted forms.
     * @param formIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteForms(formIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/form/{formIds}".replace("{" + "formIds" + "}", "$formIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all form templates for current user
     * 
     * @param loadLayout  (optional)
     * @return kotlin.Array<FormTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findFormTemplates(loadLayout: kotlin.Boolean? = null): kotlin.Array<FormTemplateDto> {
        val localVariableQuery: MultiValueMap = mapOf("loadLayout" to listOf("$loadLayout"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/template", query = localVariableQuery
        )
        val response = request<kotlin.Array<FormTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all form templates
     * 
     * @param specialityCode  
     * @param loadLayout  (optional)
     * @return kotlin.Array<FormTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findFormTemplatesBySpeciality(specialityCode: kotlin.String, loadLayout: kotlin.Boolean? = null): kotlin.Array<FormTemplateDto> {
        val localVariableQuery: MultiValueMap = mapOf("loadLayout" to listOf("$loadLayout"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/template/bySpecialty/{specialityCode}".replace("{" + "specialityCode" + "}", "$specialityCode"), query = localVariableQuery
        )
        val response = request<kotlin.Array<FormTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List forms found By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param hcPartyId  
     * @param secretFKeys  
     * @param healthElementId  (optional)
     * @param planOfActionId  (optional)
     * @param formTemplateId  (optional)
     * @return kotlin.Array<FormDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findFormsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String, healthElementId: kotlin.String? = null, planOfActionId: kotlin.String? = null, formTemplateId: kotlin.String? = null): kotlin.Array<FormDto> {
        val localVariableQuery: MultiValueMap = mapOf("hcPartyId" to listOf("$hcPartyId"), "secretFKeys" to listOf("$secretFKeys"), "healthElementId" to listOf("$healthElementId"), "planOfActionId" to listOf("$planOfActionId"), "formTemplateId" to listOf("$formTemplateId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/byHcPartySecretForeignKeys", query = localVariableQuery
        )
        val response = request<kotlin.Array<FormDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List form stubs found By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param hcPartyId  
     * @param secretFKeys  
     * @return kotlin.Array<IcureStubDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findFormsDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String): kotlin.Array<IcureStubDto> {
        val localVariableQuery: MultiValueMap = mapOf("hcPartyId" to listOf("$hcPartyId"), "secretFKeys" to listOf("$secretFKeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/byHcPartySecretForeignKeys/delegations", query = localVariableQuery
        )
        val response = request<kotlin.Array<IcureStubDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<IcureStubDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a list of forms by ids
     * Keys must be delimited by coma
     * @param formId  
     * @param hcPartyId  
     * @return kotlin.Array<FormDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getChildrenForms(formId: kotlin.String, hcPartyId: kotlin.String): kotlin.Array<FormDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/childrenOf/{formId}/{hcPartyId}".replace("{" + "formId" + "}", "$formId").replace("{" + "hcPartyId" + "}", "$hcPartyId")
        )
        val response = request<kotlin.Array<FormDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a form
     * 
     * @param formId  
     * @return FormDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getForm(formId: kotlin.String): FormDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/{formId}".replace("{" + "formId" + "}", "$formId")
        )
        val response = request<FormDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a form template by guid
     * 
     * @param formTemplateId  
     * @return FormTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getFormTemplate(formTemplateId: kotlin.String): FormTemplateDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/template/{formTemplateId}".replace("{" + "formTemplateId" + "}", "$formTemplateId")
        )
        val response = request<FormTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a form template
     * 
     * @param formTemplateGuid  
     * @param specialityCode  
     * @return kotlin.Array<FormTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getFormTemplatesByGuid(formTemplateGuid: kotlin.String, specialityCode: kotlin.String): kotlin.Array<FormTemplateDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/form/template/{specialityCode}/guid/{formTemplateGuid}".replace("{" + "formTemplateGuid" + "}", "$formTemplateGuid").replace("{" + "specialityCode" + "}", "$specialityCode")
        )
        val response = request<kotlin.Array<FormTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a list of forms by ids
     * Keys must be delimited by coma
     * @param body  
     * @return kotlin.Array<FormDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getForms(body: ListOfIdsDto): kotlin.Array<FormDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/form/byIds"
        )
        val response = request<kotlin.Array<FormDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a form
     * Returns the modified form.
     * @param body  
     * @return FormDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyForm(body: FormDto): FormDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/form"
        )
        val response = request<FormDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a batch of forms
     * Returns the modified forms.
     * @param body  
     * @return kotlin.Array<FormDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyForms(body: kotlin.Array<FormDto>): kotlin.Array<FormDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/form/batch"
        )
        val response = request<kotlin.Array<FormDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FormDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delegates a form to a healthcare party
     * It delegates a form to a healthcare party. Returns the form with the new delegations.
     * @param body  
     * @param formId  
     * @return FormDto
     */
    @Suppress("UNCHECKED_CAST")
    fun newFormDelegations(body: kotlin.Array<DelegationDto>, formId: kotlin.String): FormDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/form/delegate/{formId}".replace("{" + "formId" + "}", "$formId")
        )
        val response = request<FormDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update delegations in form.
     * Keys must be delimited by coma
     * @param body  
     * @return kotlin.Array<IcureStubDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun setFormsDelegations(body: kotlin.Array<IcureStubDto>): kotlin.Array<IcureStubDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/form/delegations"
        )
        val response = request<kotlin.Array<IcureStubDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<IcureStubDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update a form template&#x27;s layout
     * 
     * @param formTemplateId  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun setTemplateAttachmentMulti(formTemplateId: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/form/template/{formTemplateId}/attachment/multipart".replace("{" + "formTemplateId" + "}", "$formTemplateId")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a form template with the current user
     * Returns an instance of created form template.
     * @param body  
     * @param formTemplateId  
     * @return FormTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateFormTemplate(body: FormTemplateDto, formTemplateId: kotlin.String): FormTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/form/template/{formTemplateId}".replace("{" + "formTemplateId" + "}", "$formTemplateId")
        )
        val response = request<FormTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FormTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
