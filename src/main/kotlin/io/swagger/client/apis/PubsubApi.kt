/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis



import io.swagger.client.infrastructure.*

class PubsubApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Offer auth data on secret bucket
     * Offer auth data on previously agreed on secret bucket, data should be encrypted
     * @param body
     * @param bucket
     * @return kotlin.collections.Map<kotlin.String, kotlin.Boolean>
     */
    @Suppress("UNCHECKED_CAST")
    fun offerAuth(body: kotlin.Array<ByteArray>, bucket: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.Boolean> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/pubsub/auth/{bucket}".replace("{" + "bucket" + "}", "$bucket")
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.Boolean>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.Boolean>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * publish data
     * Publish value with key
     * @param body
     * @param key
     * @return kotlin.collections.Map<kotlin.String, kotlin.Boolean>
     */
    @Suppress("UNCHECKED_CAST")
    fun pub(body: kotlin.Array<ByteArray>, key: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.Boolean> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/pubsub/pub/{key}".replace("{" + "key" + "}", "$key")
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.Boolean>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.Boolean>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Recover auth data from secret bucket
     * Recover auth data from bucket, data should be encrypted
     * @param bucket
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun recoverAuth(bucket: kotlin.String): kotlin.Array<kotlin.Byte> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/pubsub/auth/recover/{bucket}".replace("{" + "bucket" + "}", "$bucket")
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * subscribe to data
     * Try to get published data
     * @param key
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun sub(key: kotlin.String): kotlin.Array<kotlin.Byte> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/pubsub/sub/{key}".replace("{" + "key" + "}", "$key")
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
