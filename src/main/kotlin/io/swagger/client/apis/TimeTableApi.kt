/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.TimeTableDto

import io.swagger.client.infrastructure.*

class TimeTableApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates a timeTable
     * 
     * @param body  
     * @return TimeTableDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createTimeTable(body: TimeTableDto): TimeTableDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/timeTable"
        )
        val response = request<TimeTableDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TimeTableDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes an timeTable
     * 
     * @param timeTableIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteTimeTable(timeTableIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/timeTable/{timeTableIds}".replace("{" + "timeTableIds" + "}", "$timeTableIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a timeTable
     * 
     * @param timeTableId  
     * @return TimeTableDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getTimeTable(timeTableId: kotlin.String): TimeTableDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/timeTable/{timeTableId}".replace("{" + "timeTableId" + "}", "$timeTableId")
        )
        val response = request<TimeTableDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TimeTableDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get TimeTables by AgendaId
     * 
     * @param agendaId  
     * @return kotlin.Array<TimeTableDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getTimeTablesByAgendaId(agendaId: kotlin.String): kotlin.Array<TimeTableDto> {
        val localVariableQuery: MultiValueMap = mapOf("agendaId" to listOf("$agendaId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/timeTable/byAgendaId", query = localVariableQuery
        )
        val response = request<kotlin.Array<TimeTableDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<TimeTableDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get TimeTables by Period and AgendaId
     * 
     * @param startDate  
     * @param endDate  
     * @param agendaId  
     * @return kotlin.Array<TimeTableDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getTimeTablesByPeriodAndAgendaId(startDate: kotlin.Long, endDate: kotlin.Long, agendaId: kotlin.String): kotlin.Array<TimeTableDto> {
        val localVariableQuery: MultiValueMap = mapOf("startDate" to listOf("$startDate"), "endDate" to listOf("$endDate"), "agendaId" to listOf("$agendaId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/timeTable/byPeriodAndAgendaId", query = localVariableQuery
        )
        val response = request<kotlin.Array<TimeTableDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<TimeTableDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modifies an timeTable
     * 
     * @param body  
     * @return TimeTableDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyTimeTable(body: TimeTableDto): TimeTableDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/timeTable"
        )
        val response = request<TimeTableDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TimeTableDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
