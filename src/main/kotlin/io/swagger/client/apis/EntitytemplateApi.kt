/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.EntityTemplateDto

import io.swagger.client.infrastructure.*

class EntitytemplateApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create a EntityTemplate
     * Type, EntityTemplate and Version are required.
     * @param body  
     * @return EntityTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createEntityTemplate(body: EntityTemplateDto): EntityTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/entitytemplate"
        )
        val response = request<EntityTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EntityTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete entity templates
     * 
     * @param entityTemplateIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteEntityTemplate(entityTemplateIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/entitytemplate/{entityTemplateIds}".replace("{" + "entityTemplateIds" + "}", "$entityTemplateIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding entityTemplates by entityTemplate, type and version with pagination.
     * Returns a list of entityTemplates matched with given input.
     * @param type  
     * @param searchString  (optional)
     * @param includeEntities  (optional)
     * @return kotlin.Array<EntityTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findAllEntityTemplates(type: kotlin.String, searchString: kotlin.String? = null, includeEntities: kotlin.Boolean? = null): kotlin.Array<EntityTemplateDto> {
        val localVariableQuery: MultiValueMap = mapOf("searchString" to listOf("$searchString"), "includeEntities" to listOf("$includeEntities"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/entitytemplate/findAll/{type}".replace("{" + "type" + "}", "$type"), query = localVariableQuery
        )
        val response = request<kotlin.Array<EntityTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EntityTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding entityTemplates by userId, entityTemplate, type and version with pagination.
     * Returns a list of entityTemplates matched with given input.
     * @param userId  
     * @param type  
     * @param searchString  (optional)
     * @param includeEntities  (optional)
     * @return kotlin.Array<EntityTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findEntityTemplates(userId: kotlin.String, type: kotlin.String, searchString: kotlin.String? = null, includeEntities: kotlin.Boolean? = null): kotlin.Array<EntityTemplateDto> {
        val localVariableQuery: MultiValueMap = mapOf("searchString" to listOf("$searchString"), "includeEntities" to listOf("$includeEntities"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/entitytemplate/find/{userId}/{type}".replace("{" + "userId" + "}", "$userId").replace("{" + "type" + "}", "$type"), query = localVariableQuery
        )
        val response = request<kotlin.Array<EntityTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EntityTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a entityTemplate
     * Get a entityTemplate based on ID or (entityTemplate,type,version) as query strings. (entityTemplate,type,version) is unique.
     * @param entityTemplateId EntityTemplate id 
     * @return EntityTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getEntityTemplate(entityTemplateId: kotlin.String): EntityTemplateDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/entitytemplate/{entityTemplateId}".replace("{" + "entityTemplateId" + "}", "$entityTemplateId")
        )
        val response = request<EntityTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EntityTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a list of entityTemplates by ids
     * Keys must be delimited by coma
     * @param entityTemplateIds  
     * @return kotlin.Array<EntityTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getEntityTemplates(entityTemplateIds: kotlin.String): kotlin.Array<EntityTemplateDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/entitytemplate/byIds/{entityTemplateIds}".replace("{" + "entityTemplateIds" + "}", "$entityTemplateIds")
        )
        val response = request<kotlin.Array<EntityTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EntityTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a entityTemplate
     * Modification of (type, entityTemplate, version) is not allowed.
     * @param body  
     * @return EntityTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyEntityTemplate(body: EntityTemplateDto): EntityTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/entitytemplate"
        )
        val response = request<EntityTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as EntityTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
