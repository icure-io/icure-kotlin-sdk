/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis


import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.DocumentDto
import io.swagger.client.models.IcureStubDto
import io.swagger.client.models.ListOfIdsDto

import io.swagger.client.infrastructure.*

class DocumentApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates a document
     *
     * @param body
     * @return DocumentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createDocument(body: DocumentDto): DocumentDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/document"
        )
        val response = request<DocumentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a document&#x27;s attachment
     *
     * @param documentId
     * @return DocumentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteAttachment(documentId: kotlin.String): DocumentDto {

        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/document/{documentId}/attachment".replace("{" + "documentId" + "}", "$documentId")
        )
        val response = request<DocumentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a document
     *
     * @param documentIds
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteDocument(documentIds: kotlin.String): kotlin.Array<DocIdentifier> {

        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/document/{documentIds}".replace("{" + "documentIds" + "}", "$documentIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List documents found By type, By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param documentTypeCode
     * @param hcPartyId
     * @param secretFKeys
     * @return kotlin.Array<DocumentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findByTypeHCPartyMessageSecretFKeys(documentTypeCode: kotlin.String, hcPartyId: kotlin.String, secretFKeys: kotlin.String): kotlin.Array<DocumentDto> {
        val localVariableQuery: MultiValueMap = mapOf("documentTypeCode" to listOf("$documentTypeCode"), "hcPartyId" to listOf("$hcPartyId"), "secretFKeys" to listOf("$secretFKeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/document/byTypeHcPartySecretForeignKeys", query = localVariableQuery
        )
        val response = request<kotlin.Array<DocumentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List documents found By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param hcPartyId
     * @param secretFKeys
     * @return kotlin.Array<DocumentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findDocumentsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String): kotlin.Array<DocumentDto> {
        val localVariableQuery: MultiValueMap = mapOf("hcPartyId" to listOf("$hcPartyId"), "secretFKeys" to listOf("$secretFKeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/document/byHcPartySecretForeignKeys", query = localVariableQuery
        )
        val response = request<kotlin.Array<DocumentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List documents with no delegation
     * Keys must be delimited by coma
     * @param limit  (optional)
     * @return kotlin.Array<DocumentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findWithoutDelegation(limit: kotlin.Int? = null): kotlin.Array<DocumentDto> {
        val localVariableQuery: MultiValueMap = mapOf("limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/document/woDelegation", query = localVariableQuery
        )
        val response = request<kotlin.Array<DocumentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a document
     *
     * @param documentId
     * @return DocumentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getDocument(documentId: kotlin.String): DocumentDto {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/document/{documentId}".replace("{" + "documentId" + "}", "$documentId")
        )
        val response = request<DocumentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a document
     *
     * @param documentId
     * @param attachmentId
     * @param enckeys  (optional)
     * @param fileName  (optional)
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun getDocumentAttachment(documentId: kotlin.String, attachmentId: kotlin.String, enckeys: kotlin.String? = null, fileName: kotlin.String? = null): kotlin.Array<kotlin.Byte> {
        val localVariableQuery: MultiValueMap = mapOf("enckeys" to listOf("$enckeys"), "fileName" to listOf("$fileName"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/document/{documentId}/attachment/{attachmentId}".replace("{" + "documentId" + "}", "$documentId").replace("{" + "attachmentId" + "}", "$attachmentId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a document
     *
     * @param body
     * @return kotlin.Array<DocumentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getDocuments(body: ListOfIdsDto): kotlin.Array<DocumentDto> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/document/batch"
        )
        val response = request<kotlin.Array<DocumentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Updates a document
     *
     * @param body
     * @return DocumentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyDocument(body: DocumentDto): DocumentDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/document"
        )
        val response = request<DocumentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Updates a batch of documents
     * Returns the modified documents.
     * @param body
     * @return kotlin.Array<DocumentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyDocuments(body: kotlin.Array<DocumentDto>): kotlin.Array<DocumentDto> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/document/batch"
        )
        val response = request<kotlin.Array<DocumentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a document&#x27;s attachment
     *
     * @param body
     * @param documentId
     * @param enckeys  (optional)
     * @return DocumentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setDocumentAttachment(body: kotlin.Array<ByteArray>, documentId: kotlin.String, enckeys: kotlin.String? = null): DocumentDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("enckeys" to listOf("$enckeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/document/{documentId}/attachment".replace("{" + "documentId" + "}", "$documentId"), query = localVariableQuery
        )
        val response = request<DocumentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a document&#x27;s attachment
     *
     * @param documentId
     * @param enckeys  (optional)
     * @return DocumentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setDocumentAttachmentMulti(documentId: kotlin.String, enckeys: kotlin.String? = null): DocumentDto {
        val localVariableQuery: MultiValueMap = mapOf("enckeys" to listOf("$enckeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/document/{documentId}/attachment/multipart".replace("{" + "documentId" + "}", "$documentId"), query = localVariableQuery
        )
        val response = request<DocumentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update delegations in healthElements.
     * Keys must be delimited by coma
     * @param body
     * @return kotlin.Array<IcureStubDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun setDocumentsDelegations(body: kotlin.Array<IcureStubDto>): kotlin.Array<IcureStubDto> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/document/delegations"
        )
        val response = request<kotlin.Array<IcureStubDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<IcureStubDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
