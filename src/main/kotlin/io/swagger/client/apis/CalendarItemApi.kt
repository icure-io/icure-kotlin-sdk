/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CalendarItemDto
import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.IcureStubDto
import io.swagger.client.models.ListOfIdsDto

import io.swagger.client.infrastructure.*

class CalendarItemApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates a calendarItem
     * 
     * @param body  
     * @return CalendarItemDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createCalendarItem(body: CalendarItemDto): CalendarItemDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/calendarItem"
        )
        val response = request<CalendarItemDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CalendarItemDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes an calendarItem
     * 
     * @param calendarItemIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteCalendarItem(calendarItemIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/calendarItem/{calendarItemIds}".replace("{" + "calendarItemIds" + "}", "$calendarItemIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find CalendarItems by hcparty and patient
     * 
     * @param hcPartyId  
     * @param secretFKeys  
     * @return kotlin.Array<CalendarItemDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findCalendarItemsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String): kotlin.Array<CalendarItemDto> {
        val localVariableQuery: MultiValueMap = mapOf("hcPartyId" to listOf("$hcPartyId"), "secretFKeys" to listOf("$secretFKeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/calendarItem/byHcPartySecretForeignKeys", query = localVariableQuery
        )
        val response = request<kotlin.Array<CalendarItemDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets an calendarItem
     * 
     * @param calendarItemId  
     * @return CalendarItemDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItem(calendarItemId: kotlin.String): CalendarItemDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/calendarItem/{calendarItemId}".replace("{" + "calendarItemId" + "}", "$calendarItemId")
        )
        val response = request<CalendarItemDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CalendarItemDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all calendarItems
     * 
     * @return kotlin.Array<CalendarItemDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItems(): kotlin.Array<CalendarItemDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/calendarItem"
        )
        val response = request<kotlin.Array<CalendarItemDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get CalendarItems by Period and HcPartyId
     * 
     * @param startDate  
     * @param endDate  
     * @param hcPartyId  
     * @return kotlin.Array<CalendarItemDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItemsByPeriodAndHcPartyId(startDate: kotlin.Long, endDate: kotlin.Long, hcPartyId: kotlin.String): kotlin.Array<CalendarItemDto> {
        val localVariableQuery: MultiValueMap = mapOf("startDate" to listOf("$startDate"), "endDate" to listOf("$endDate"), "hcPartyId" to listOf("$hcPartyId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/calendarItem/byPeriodAndHcPartyId", query = localVariableQuery
        )
        val response = request<kotlin.Array<CalendarItemDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get calendarItems by id
     * 
     * @param body  
     * @return kotlin.Array<CalendarItemDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItemsWithIds(body: ListOfIdsDto): kotlin.Array<CalendarItemDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/calendarItem/byIds"
        )
        val response = request<kotlin.Array<CalendarItemDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get CalendarItems by Period and AgendaId
     * 
     * @param startDate  
     * @param endDate  
     * @param agendaId  
     * @return kotlin.Array<CalendarItemDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarsByPeriodAndAgendaId(startDate: kotlin.Long, endDate: kotlin.Long, agendaId: kotlin.String): kotlin.Array<CalendarItemDto> {
        val localVariableQuery: MultiValueMap = mapOf("startDate" to listOf("$startDate"), "endDate" to listOf("$endDate"), "agendaId" to listOf("$agendaId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/calendarItem/byPeriodAndAgendaId", query = localVariableQuery
        )
        val response = request<kotlin.Array<CalendarItemDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modifies an calendarItem
     * 
     * @param body  
     * @return CalendarItemDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyCalendarItem(body: CalendarItemDto): CalendarItemDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/calendarItem"
        )
        val response = request<CalendarItemDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CalendarItemDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update delegations in calendarItems
     * 
     * @param body  (optional)
     * @return kotlin.Array<CalendarItemDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun setCalendarItemsDelegations(body: kotlin.Array<IcureStubDto>? = null): kotlin.Array<CalendarItemDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/calendarItem/delegations"
        )
        val response = request<kotlin.Array<CalendarItemDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
