/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ContactDto
import io.swagger.client.models.ResultInfoDto

import io.swagger.client.infrastructure.*

class BeresultimportApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Can we handle this document
     * 
     * @param id  
     * @param enckeys  
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    fun canHandle(id: kotlin.String, enckeys: kotlin.String): kotlin.Boolean {
        val localVariableQuery: MultiValueMap = mapOf("enckeys" to listOf("$enckeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_result_import/canhandle/{id}".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<kotlin.Boolean>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Boolean
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * import document
     * 
     * @param documentId  
     * @param hcpId  
     * @param language  
     * @param protocolIds  
     * @param formIds  
     * @param planOfActionId  
     * @param enckeys  
     * @param ctc  
     * @return ContactDto
     */
    @Suppress("UNCHECKED_CAST")
    fun doImport(documentId: kotlin.String, hcpId: kotlin.String, language: kotlin.String, protocolIds: kotlin.String, formIds: kotlin.String, planOfActionId: kotlin.String, enckeys: kotlin.String, ctc: ContactDto): ContactDto {
        val localVariableQuery: MultiValueMap = mapOf("protocolIds" to listOf("$protocolIds"), "formIds" to listOf("$formIds"), "planOfActionId" to listOf("$planOfActionId"), "enckeys" to listOf("$enckeys"), "ctc" to listOf("$ctc"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_result_import/import/{documentId}/{hcpId}/{language}".replace("{" + "documentId" + "}", "$documentId").replace("{" + "hcpId" + "}", "$hcpId").replace("{" + "language" + "}", "$language"), query = localVariableQuery
        )
        val response = request<ContactDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ContactDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Extract general infos from document
     * 
     * @param id  
     * @param language  
     * @param enckeys  
     * @param full  (optional)
     * @return kotlin.Array<ResultInfoDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getInfos(id: kotlin.String, language: kotlin.String, enckeys: kotlin.String, full: kotlin.Boolean? = null): kotlin.Array<ResultInfoDto> {
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"), "enckeys" to listOf("$enckeys"), "full" to listOf("$full"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_result_import/infos/{id}".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<kotlin.Array<ResultInfoDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ResultInfoDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
