/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.IndexingInfoDto
import io.swagger.client.models.ReplicationInfoDto
import io.swagger.client.models.UserDto

import io.swagger.client.infrastructure.*

class IcureApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Get index info
     *
     * @return IndexingInfoDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getIndexingInfo(): IndexingInfoDto {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/i"
        )
        val response = request<IndexingInfoDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as IndexingInfoDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get process info
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun getProcessInfo(): kotlin.String {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/p"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get property types
     *
     * @param type
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun getPropertyTypes(type: kotlin.String): kotlin.Array<kotlin.String> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/propertytypes/{type}".replace("{" + "type" + "}", "$type")
        )
        val response = request<kotlin.Array<kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get index info
     *
     * @return ReplicationInfoDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getReplicationInfo(): ReplicationInfoDto {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/r"
        )
        val response = request<ReplicationInfoDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReplicationInfoDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get users stubs
     *
     * @return kotlin.Array<UserDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getUsers(): kotlin.Array<UserDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/u"
        )
        val response = request<kotlin.Array<UserDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<UserDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get version
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun getVersion(): kotlin.String {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/v"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Check if a patient exists
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun isPatientReady(): kotlin.String {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/pok"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Check if a user exists
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun isReady(): kotlin.String {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/icure/ok"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Resolve contacts conflicts
     *
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolveContactsConflicts(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/contact"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * resolve documents conflicts
     *
     * @param ids  (optional)
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolveDocumentsConflicts(ids: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mapOf("ids" to listOf("$ids"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/document", query = localVariableQuery
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * resolve forms conflicts
     *
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolveFormsConflicts(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/form"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * resolve health elements conflicts
     *
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolveHealthElementsConflicts(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/healthelement"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * resolve invoices conflicts
     *
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolveInvoicesConflicts(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/invoice"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * resolve messages conflicts
     *
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolveMessagesConflicts(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/message"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Resolve patients conflicts
     *
     * @return Unit
     */
    @Suppress("UNCHECKED_CAST")
    fun resolvePatientsConflicts(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/conflicts/patient"
        )
        val response = request<Unit>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Force update design doc
     *
     * @param entityName
     * @param warmup  (optional)
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    fun updateDesignDoc(entityName: kotlin.String, warmup: kotlin.Boolean? = null): kotlin.Boolean {
        val localVariableQuery: MultiValueMap = mapOf("warmup" to listOf("$warmup"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/icure/dd/{entityName}".replace("{" + "entityName" + "}", "$entityName"), query = localVariableQuery
        )
        val response = request<kotlin.Boolean>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Boolean
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
