/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis


import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.ReceiptDto

import io.swagger.client.infrastructure.*

class ReceiptApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates a receipt
     *
     * @param body
     * @return ReceiptDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createReceipt(body: ReceiptDto): ReceiptDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/receipt"
        )
        val response = request<ReceiptDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReceiptDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a receipt
     *
     * @param receiptIds
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteReceipt(receiptIds: kotlin.String): kotlin.Array<DocIdentifier> {

        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/receipt/{receiptIds}".replace("{" + "receiptIds" + "}", "$receiptIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a receipt
     *
     * @param receiptId
     * @return ReceiptDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getReceipt(receiptId: kotlin.String): ReceiptDto {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/receipt/{receiptId}".replace("{" + "receiptId" + "}", "$receiptId")
        )
        val response = request<ReceiptDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReceiptDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get an attachment
     *
     * @param receiptId
     * @param attachmentId
     * @param enckeys
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun getReceiptAttachment(receiptId: kotlin.String, attachmentId: kotlin.String, enckeys: kotlin.String): kotlin.Array<kotlin.Byte> {
        val localVariableQuery: MultiValueMap = mapOf("enckeys" to listOf("$enckeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/receipt/{receiptId}/attachment/{attachmentId}".replace("{" + "receiptId" + "}", "$receiptId").replace("{" + "attachmentId" + "}", "$attachmentId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a receipt
     *
     * @param ref
     * @return kotlin.Array<ReceiptDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listByReference(ref: kotlin.String): kotlin.Array<ReceiptDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/receipt/byref/{ref}".replace("{" + "ref" + "}", "$ref")
        )
        val response = request<kotlin.Array<ReceiptDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ReceiptDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Updates a receipt
     *
     * @param body
     * @return ReceiptDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyReceipt(body: ReceiptDto): ReceiptDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/receipt"
        )
        val response = request<ReceiptDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReceiptDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a receipt&#x27;s attachment
     *
     * @param body
     * @param receiptId
     * @param blobType
     * @param enckeys  (optional)
     * @return ReceiptDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setReceiptAttachment(body: kotlin.Array<ByteArray>, receiptId: kotlin.String, blobType: kotlin.String, enckeys: kotlin.String? = null): ReceiptDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("enckeys" to listOf("$enckeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/receipt/{receiptId}/attachment/{blobType}".replace("{" + "receiptId" + "}", "$receiptId").replace("{" + "blobType" + "}", "$blobType"), query = localVariableQuery
        )
        val response = request<ReceiptDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReceiptDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
