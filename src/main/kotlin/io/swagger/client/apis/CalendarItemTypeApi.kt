/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CalendarItemTypeDto
import io.swagger.client.models.DocIdentifier

import io.swagger.client.infrastructure.*

class CalendarItemTypeApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates a calendarItemType
     * 
     * @param body  
     * @return CalendarItemTypeDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createCalendarItemType(body: CalendarItemTypeDto): CalendarItemTypeDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/calendarItemType"
        )
        val response = request<CalendarItemTypeDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CalendarItemTypeDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes an calendarItemType
     * 
     * @param calendarItemTypeIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteCalendarItemType(calendarItemTypeIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/calendarItemType/{calendarItemTypeIds}".replace("{" + "calendarItemTypeIds" + "}", "$calendarItemTypeIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets an calendarItemType
     * 
     * @param calendarItemTypeId  
     * @return CalendarItemTypeDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItemType(calendarItemTypeId: kotlin.String): CalendarItemTypeDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/calendarItemType/{calendarItemTypeId}".replace("{" + "calendarItemTypeId" + "}", "$calendarItemTypeId")
        )
        val response = request<CalendarItemTypeDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CalendarItemTypeDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all calendarItemTypes
     * 
     * @return kotlin.Array<CalendarItemTypeDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItemTypes(): kotlin.Array<CalendarItemTypeDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/calendarItemType"
        )
        val response = request<kotlin.Array<CalendarItemTypeDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemTypeDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all calendarItemTypes include deleted
     * 
     * @return kotlin.Array<CalendarItemTypeDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCalendarItemTypesIncludeDeleted(): kotlin.Array<CalendarItemTypeDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/calendarItemType/includeDeleted"
        )
        val response = request<kotlin.Array<CalendarItemTypeDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarItemTypeDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modifies an calendarItemType
     * 
     * @param body  
     * @return CalendarItemTypeDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyCalendarItemType(body: CalendarItemTypeDto): CalendarItemTypeDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/calendarItemType"
        )
        val response = request<CalendarItemTypeDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CalendarItemTypeDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
