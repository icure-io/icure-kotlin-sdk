/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis



import io.swagger.client.infrastructure.*

class BeresultexportApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Export data
     *
     * @param body
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun exportHealthOne(body: kotlin.Array<ByteArray>, fromHcpId: kotlin.String, toHcpId: kotlin.String, patId: kotlin.String, date: kotlin.Long, ref: kotlin.String): kotlin.Array<kotlin.Byte> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/be_result_export/hl1/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}".replace("{" + "fromHcpId" + "}", "$fromHcpId").replace("{" + "toHcpId" + "}", "$toHcpId").replace("{" + "patId" + "}", "$patId").replace("{" + "date" + "}", "$date").replace("{" + "ref" + "}", "$ref")
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Export data
     *
     * @param body
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param mimeType  (optional)
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun exportKmehrReport(body: kotlin.Array<ByteArray>, fromHcpId: kotlin.String, toHcpId: kotlin.String, patId: kotlin.String, date: kotlin.Long, ref: kotlin.String, mimeType: kotlin.Boolean? = null): kotlin.Array<kotlin.Byte> {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("mimeType" to listOf("$mimeType"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/be_result_export/kmehrreport/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}".replace("{" + "fromHcpId" + "}", "$fromHcpId").replace("{" + "toHcpId" + "}", "$toHcpId").replace("{" + "patId" + "}", "$patId").replace("{" + "date" + "}", "$date").replace("{" + "ref" + "}", "$ref"), query = localVariableQuery
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Export data
     *
     * @param body
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun exportMedidoc(body: kotlin.Array<ByteArray>, fromHcpId: kotlin.String, toHcpId: kotlin.String, patId: kotlin.String, date: kotlin.Long, ref: kotlin.String): kotlin.Array<kotlin.Byte> {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/be_result_export/medidoc/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}".replace("{" + "fromHcpId" + "}", "$fromHcpId").replace("{" + "toHcpId" + "}", "$toHcpId").replace("{" + "patId" + "}", "$patId").replace("{" + "date" + "}", "$date").replace("{" + "ref" + "}", "$ref")
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
