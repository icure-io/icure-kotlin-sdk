/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.HealthcarePartyDto
import io.swagger.client.models.ListOfIdsDto
import io.swagger.client.models.PaginatedListHealthcarePartyDto
import io.swagger.client.models.PublicKeyDto

import io.swagger.client.infrastructure.*

class HcpartyApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create a healthcare party
     * One of Name or Last name+First name, Nihii, and Public key are required.
     * @param body  
     * @return HealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createHealthcareParty(body: HealthcarePartyDto): HealthcarePartyDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/hcparty"
        )
        val response = request<HealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create a healthcare party
     * One of Name or Last name+First name, Nihii, and Public key are required.
     * @param body  
     * @param groupId  
     * @return HealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createHealthcarePartyInGroup(body: HealthcarePartyDto, groupId: kotlin.String): HealthcarePartyDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/hcparty/inGroup/{groupId}".replace("{" + "groupId" + "}", "$groupId")
        )
        val response = request<HealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete a healthcare party
     * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
     * @param healthcarePartyIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteHealthcareParties(healthcarePartyIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/hcparty/{healthcarePartyIds}".replace("{" + "healthcarePartyIds" + "}", "$healthcarePartyIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete a healthcare party
     * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
     * @param groupId  
     * @param healthcarePartyIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteHealthcarePartiesInGroup(groupId: kotlin.String, healthcarePartyIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/hcparty/inGroup/{groupId}/{healthcarePartyIds}".replace("{" + "groupId" + "}", "$groupId").replace("{" + "healthcarePartyIds" + "}", "$healthcarePartyIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find healthcare parties by name with(out) pagination
     * Returns a list of healthcare parties.
     * @param name The Last name search value (optional)
     * @param startKey A healthcare party Last name (optional)
     * @param startDocumentId A healthcare party document ID (optional)
     * @param limit Number of rows (optional)
     * @param desc Descending (optional)
     * @return PaginatedListHealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findByName(name: kotlin.String? = null, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null, desc: kotlin.Boolean? = null): PaginatedListHealthcarePartyDto {
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"), "desc" to listOf("$desc"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/byName", query = localVariableQuery
        )
        val response = request<PaginatedListHealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListHealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find healthcare parties by name with(out) pagination
     * Returns a list of healthcare parties.
     * @param type The type of the HCP (persphysician) 
     * @param spec The speciality of the HCP 
     * @param firstCode The first postCode for the HCP 
     * @param lastCode The last postCode for the HCP 
     * @param limit Number of rows (optional)
     * @return PaginatedListHealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findBySpecialityAndPostCode(type: kotlin.String, spec: kotlin.String, firstCode: kotlin.String, lastCode: kotlin.String, limit: kotlin.Int? = null): PaginatedListHealthcarePartyDto {
        val localVariableQuery: MultiValueMap = mapOf("limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/bySpecialityAndPostCode/{type}/{spec}/{firstCode}/to/{lastCode}".replace("{" + "type" + "}", "$type").replace("{" + "spec" + "}", "$spec").replace("{" + "firstCode" + "}", "$firstCode").replace("{" + "lastCode" + "}", "$lastCode"), query = localVariableQuery
        )
        val response = request<PaginatedListHealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListHealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find healthcare parties by nihii or ssin with(out) pagination
     * Returns a list of healthcare parties.
     * @param searchValue  
     * @param startKey A healthcare party Last name (optional)
     * @param startDocumentId A healthcare party document ID (optional)
     * @param limit Number of rows (optional)
     * @param desc Descending (optional)
     * @return PaginatedListHealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findBySsinOrNihii(searchValue: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null, desc: kotlin.Boolean? = null): PaginatedListHealthcarePartyDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"), "desc" to listOf("$desc"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/byNihiiOrSsin/{searchValue}".replace("{" + "searchValue" + "}", "$searchValue"), query = localVariableQuery
        )
        val response = request<PaginatedListHealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListHealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the current healthcare party if logged in.
     * General information about the current healthcare Party
     * @return HealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getCurrentHealthcareParty(): HealthcarePartyDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/current"
        )
        val response = request<HealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get the HcParty encrypted AES keys indexed by owner
     * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
     * @param healthcarePartyId  
     * @return kotlin.collections.Map<kotlin.String, kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun getHcPartyKeysForDelegate(healthcarePartyId: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.String> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/{healthcarePartyId}/keys".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId")
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get healthcareParties by their IDs
     * General information about the healthcare Party
     * @param healthcarePartyIds  
     * @return kotlin.Array<HealthcarePartyDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getHealthcareParties(healthcarePartyIds: kotlin.String): kotlin.Array<HealthcarePartyDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/byIds/{healthcarePartyIds}".replace("{" + "healthcarePartyIds" + "}", "$healthcarePartyIds")
        )
        val response = request<kotlin.Array<HealthcarePartyDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<HealthcarePartyDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find children of an healthcare parties
     * Return a list of children hcp.
     * @param parentId  
     * @return kotlin.Array<HealthcarePartyDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getHealthcarePartiesByParentId(parentId: kotlin.String): kotlin.Array<HealthcarePartyDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/{parentId}/children".replace("{" + "parentId" + "}", "$parentId")
        )
        val response = request<kotlin.Array<HealthcarePartyDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<HealthcarePartyDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get healthcareParties by their IDs
     * General information about the healthcare Party
     * @param body  
     * @param groupId  
     * @return kotlin.Array<HealthcarePartyDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getHealthcarePartiesInGroup(body: ListOfIdsDto, groupId: kotlin.String): kotlin.Array<HealthcarePartyDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/hcparty/inGroup/{groupId}/byIds".replace("{" + "groupId" + "}", "$groupId")
        )
        val response = request<kotlin.Array<HealthcarePartyDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<HealthcarePartyDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a healthcareParty by his ID
     * General information about the healthcare Party
     * @param healthcarePartyId  
     * @return HealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getHealthcareParty(healthcarePartyId: kotlin.String): HealthcarePartyDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/{healthcarePartyId}".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId")
        )
        val response = request<HealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get public key of a healthcare party
     * Returns the public key of a healthcare party in Hex
     * @param healthcarePartyId  
     * @return PublicKeyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getPublicKey(healthcarePartyId: kotlin.String): PublicKeyDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/{healthcarePartyId}/publicKey".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId")
        )
        val response = request<PublicKeyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PublicKeyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Find healthcare parties by name with(out) pagination
     * Returns a list of healthcare parties.
     * @param name The Last name search value 
     * @return kotlin.Array<HealthcarePartyDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listByName(name: kotlin.String): kotlin.Array<HealthcarePartyDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty/byNameStrict/{name}".replace("{" + "name" + "}", "$name")
        )
        val response = request<kotlin.Array<HealthcarePartyDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<HealthcarePartyDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List healthcare parties with(out) pagination
     * Returns a list of healthcare parties.
     * @param startKey A healthcare party Last name (optional)
     * @param startDocumentId A healthcare party document ID (optional)
     * @param limit Number of rows (optional)
     * @param desc Descending (optional)
     * @return PaginatedListHealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun listHealthcareParties(startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null, desc: kotlin.Boolean? = null): PaginatedListHealthcarePartyDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"), "desc" to listOf("$desc"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/hcparty", query = localVariableQuery
        )
        val response = request<PaginatedListHealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListHealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a Healthcare Party.
     * No particular return value. It&#x27;s just a message.
     * @param body  
     * @return HealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyHealthcareParty(body: HealthcarePartyDto): HealthcarePartyDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/hcparty"
        )
        val response = request<HealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a Healthcare Party.
     * No particular return value. It&#x27;s just a message.
     * @param body  
     * @param groupId  
     * @return HealthcarePartyDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyHealthcarePartyInGroup(body: HealthcarePartyDto, groupId: kotlin.String): HealthcarePartyDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/hcparty/inGroup/{groupId}".replace("{" + "groupId" + "}", "$groupId")
        )
        val response = request<HealthcarePartyDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as HealthcarePartyDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
