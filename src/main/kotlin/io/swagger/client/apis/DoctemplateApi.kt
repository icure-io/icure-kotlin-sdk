/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis


import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.DocumentTemplateDto

import io.swagger.client.infrastructure.*

class DoctemplateApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create a document template with the current user
     * Returns an instance of created document template.
     * @param body
     * @return DocumentTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createDocumentTemplate(body: DocumentTemplateDto): DocumentTemplateDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/doctemplate"
        )
        val response = request<DocumentTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a document template
     *
     * @param documentTemplateIds
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteDocumentTemplate(documentTemplateIds: kotlin.String): kotlin.Array<DocIdentifier> {

        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/doctemplate/{documentTemplateIds}".replace("{" + "documentTemplateIds" + "}", "$documentTemplateIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all document templates for all users
     *
     * @return kotlin.Array<DocumentTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findAllDocumentTemplates(): kotlin.Array<DocumentTemplateDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/find/all"
        )
        val response = request<kotlin.Array<DocumentTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all document templates for current user
     *
     * @return kotlin.Array<DocumentTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findDocumentTemplates(): kotlin.Array<DocumentTemplateDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate"
        )
        val response = request<kotlin.Array<DocumentTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all document templates by Type
     *
     * @param documentTypeCode
     * @return kotlin.Array<DocumentTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findDocumentTemplatesByDocumentType(documentTypeCode: kotlin.String): kotlin.Array<DocumentTemplateDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/byDocumentType/{documentTypeCode}".replace("{" + "documentTypeCode" + "}", "$documentTypeCode")
        )
        val response = request<kotlin.Array<DocumentTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all document templates by Type For currentUser
     *
     * @param documentTypeCode
     * @return kotlin.Array<DocumentTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findDocumentTemplatesByDocumentTypeForCurrentUser(documentTypeCode: kotlin.String): kotlin.Array<DocumentTemplateDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/byDocumentTypeForCurrentUser/{documentTypeCode}".replace("{" + "documentTypeCode" + "}", "$documentTypeCode")
        )
        val response = request<kotlin.Array<DocumentTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets all document templates
     *
     * @param specialityCode
     * @return kotlin.Array<DocumentTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findDocumentTemplatesBySpeciality(specialityCode: kotlin.String): kotlin.Array<DocumentTemplateDto> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/bySpecialty/{specialityCode}".replace("{" + "specialityCode" + "}", "$specialityCode")
        )
        val response = request<kotlin.Array<DocumentTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocumentTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Download a the document template attachment
     *
     * @param documentTemplateId
     * @param attachmentId
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun getAttachmentText(documentTemplateId: kotlin.String, attachmentId: kotlin.String): kotlin.Array<kotlin.Byte> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/{documentTemplateId}/attachmentText/{attachmentId}".replace("{" + "documentTemplateId" + "}", "$documentTemplateId").replace("{" + "attachmentId" + "}", "$attachmentId")
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a document template
     *
     * @param documentTemplateId
     * @return DocumentTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getDocumentTemplate(documentTemplateId: kotlin.String): DocumentTemplateDto {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/{documentTemplateId}".replace("{" + "documentTemplateId" + "}", "$documentTemplateId")
        )
        val response = request<DocumentTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Download a the document template attachment
     *
     * @param documentTemplateId
     * @param attachmentId
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun getDocumentTemplateAttachment(documentTemplateId: kotlin.String, attachmentId: kotlin.String): kotlin.Array<kotlin.Byte> {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/doctemplate/{documentTemplateId}/attachment/{attachmentId}".replace("{" + "documentTemplateId" + "}", "$documentTemplateId").replace("{" + "attachmentId" + "}", "$attachmentId")
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a document&#x27;s attachment
     *
     * @param body
     * @param documentTemplateId
     * @return DocumentTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setDocumentTemplateAttachment(body: kotlin.Array<ByteArray>, documentTemplateId: kotlin.String): DocumentTemplateDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/doctemplate/{documentTemplateId}/attachment".replace("{" + "documentTemplateId" + "}", "$documentTemplateId")
        )
        val response = request<DocumentTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a document&#x27;s attachment
     *
     * @param body
     * @param documentTemplateId
     * @return DocumentTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun setDocumentTemplateAttachmentJson(body: ByteArray, documentTemplateId: kotlin.String): DocumentTemplateDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/doctemplate/{documentTemplateId}/attachmentJson".replace("{" + "documentTemplateId" + "}", "$documentTemplateId")
        )
        val response = request<DocumentTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a document template with the current user
     * Returns an instance of created document template.
     * @param body
     * @param documentTemplateId
     * @return DocumentTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateDocumentTemplate(body: DocumentTemplateDto, documentTemplateId: kotlin.String): DocumentTemplateDto {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/doctemplate/{documentTemplateId}".replace("{" + "documentTemplateId" + "}", "$documentTemplateId")
        )
        val response = request<DocumentTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
