/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.InsuranceDto
import io.swagger.client.models.ListOfIdsDto

import io.swagger.client.infrastructure.*

class InsuranceApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates an insurance
     * 
     * @param body  
     * @return InsuranceDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createInsurance(body: InsuranceDto): InsuranceDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/insurance"
        )
        val response = request<InsuranceDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InsuranceDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes an insurance
     * 
     * @param insuranceId  
     * @return DocIdentifier
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteInsurance(insuranceId: kotlin.String): DocIdentifier {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/insurance/{insuranceId}".replace("{" + "insuranceId" + "}", "$insuranceId")
        )
        val response = request<DocIdentifier>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocIdentifier
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets an insurance
     * 
     * @param insuranceId  
     * @return InsuranceDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getInsurance(insuranceId: kotlin.String): InsuranceDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/insurance/{insuranceId}".replace("{" + "insuranceId" + "}", "$insuranceId")
        )
        val response = request<InsuranceDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InsuranceDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets insurances by id
     * 
     * @param body  
     * @return kotlin.Array<InsuranceDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getInsurances(body: ListOfIdsDto): kotlin.Array<InsuranceDto> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/insurance/byIds"
        )
        val response = request<kotlin.Array<InsuranceDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InsuranceDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets an insurance
     * 
     * @param insuranceCode  
     * @return kotlin.Array<InsuranceDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listInsurancesByCode(insuranceCode: kotlin.String): kotlin.Array<InsuranceDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/insurance/byCode/{insuranceCode}".replace("{" + "insuranceCode" + "}", "$insuranceCode")
        )
        val response = request<kotlin.Array<InsuranceDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InsuranceDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets an insurance
     * 
     * @param insuranceName  
     * @return kotlin.Array<InsuranceDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listInsurancesByName(insuranceName: kotlin.String): kotlin.Array<InsuranceDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/insurance/byName/{insuranceName}".replace("{" + "insuranceName" + "}", "$insuranceName")
        )
        val response = request<kotlin.Array<InsuranceDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InsuranceDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modifies an insurance
     * 
     * @param body  
     * @return InsuranceDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyInsurance(body: InsuranceDto): InsuranceDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/insurance"
        )
        val response = request<InsuranceDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InsuranceDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
