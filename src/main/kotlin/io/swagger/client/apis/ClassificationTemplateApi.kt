/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ClassificationTemplateDto
import io.swagger.client.models.DelegationDto
import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.PaginatedListClassificationTemplateDto

import io.swagger.client.infrastructure.*

class ClassificationTemplateApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Create a classification Template with the current user
     * Returns an instance of created classification Template.
     * @param body  
     * @return ClassificationTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createClassificationTemplate(body: ClassificationTemplateDto): ClassificationTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/classificationTemplate"
        )
        val response = request<ClassificationTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ClassificationTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete classification Templates.
     * Response is a set containing the ID&#x27;s of deleted classification Templates.
     * @param classificationTemplateIds  
     * @return kotlin.Array<DocIdentifier>
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteClassificationTemplates(classificationTemplateIds: kotlin.String): kotlin.Array<DocIdentifier> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/classificationTemplate/{classificationTemplateIds}".replace("{" + "classificationTemplateIds" + "}", "$classificationTemplateIds")
        )
        val response = request<kotlin.Array<DocIdentifier>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DocIdentifier>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List classification Templates found By Healthcare Party and secret foreign keyelementIds.
     * Keys hast to delimited by coma
     * @param hcPartyId  
     * @param secretFKeys  
     * @return kotlin.Array<ClassificationTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findClassificationTemplatesByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String): kotlin.Array<ClassificationTemplateDto> {
        val localVariableQuery: MultiValueMap = mapOf("hcPartyId" to listOf("$hcPartyId"), "secretFKeys" to listOf("$secretFKeys"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/classificationTemplate/byHcPartySecretForeignKeys", query = localVariableQuery
        )
        val response = request<kotlin.Array<ClassificationTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ClassificationTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a classification Template
     * 
     * @param classificationTemplateId  
     * @return ClassificationTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getClassificationTemplate(classificationTemplateId: kotlin.String): ClassificationTemplateDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/classificationTemplate/{classificationTemplateId}".replace("{" + "classificationTemplateId" + "}", "$classificationTemplateId")
        )
        val response = request<ClassificationTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ClassificationTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a list of classifications Templates
     * Ids are seperated by a coma
     * @param ids  
     * @return kotlin.Array<ClassificationTemplateDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getClassificationTemplateByIds(ids: kotlin.String): kotlin.Array<ClassificationTemplateDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/classificationTemplate/byIds/{ids}".replace("{" + "ids" + "}", "$ids")
        )
        val response = request<kotlin.Array<ClassificationTemplateDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ClassificationTemplateDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all classification templates with pagination
     * Returns a list of classification templates.
     * @param startKey A label 
     * @param startDocumentId An classification template document ID 
     * @param limit Number of rows 
     * @return PaginatedListClassificationTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun listClassificationTemplates(startKey: kotlin.String, startDocumentId: kotlin.String, limit: kotlin.Int): PaginatedListClassificationTemplateDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/classificationTemplate", query = localVariableQuery
        )
        val response = request<PaginatedListClassificationTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListClassificationTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modify a classification Template
     * Returns the modified classification Template.
     * @param body  
     * @return ClassificationTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyClassificationTemplate(body: ClassificationTemplateDto): ClassificationTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/classificationTemplate"
        )
        val response = request<ClassificationTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ClassificationTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delegates a classification Template to a healthcare party
     * It delegates a classification Template to a healthcare party (By current healthcare party). Returns the element with new delegations.
     * @param body  
     * @param classificationTemplateId  
     * @return ClassificationTemplateDto
     */
    @Suppress("UNCHECKED_CAST")
    fun newClassificationTemplateDelegations(body: kotlin.Array<DelegationDto>, classificationTemplateId: kotlin.String): ClassificationTemplateDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/classificationTemplate/{classificationTemplateId}/delegate".replace("{" + "classificationTemplateId" + "}", "$classificationTemplateId")
        )
        val response = request<ClassificationTemplateDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ClassificationTemplateDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
