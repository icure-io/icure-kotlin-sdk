/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AmpDto
import io.swagger.client.models.PaginatedListAmpDto
import io.swagger.client.models.PaginatedListNmpDto
import io.swagger.client.models.PaginatedListVmpDto
import io.swagger.client.models.PaginatedListVmpGroupDto
import io.swagger.client.models.PharmaceuticalFormDto
import io.swagger.client.models.SamVersionDto
import io.swagger.client.models.SubstanceDto

import io.swagger.client.infrastructure.*

class Besamv2Api(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Finding AMPs by dmpp code
     * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
     * @param dmppCode dmppCode 
     * @return kotlin.Array<AmpDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun findAmpsByDmppCode(dmppCode: kotlin.String): kotlin.Array<AmpDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/amp/byDmppCode/{dmppCode}".replace("{" + "dmppCode" + "}", "$dmppCode")
        )
        val response = request<kotlin.Array<AmpDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AmpDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding AMPs by group with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param vmpgCode vmpgCode 
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListAmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedAmpsByGroupCode(vmpgCode: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListAmpDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/amp/byGroupCode/{vmpgCode}".replace("{" + "vmpgCode" + "}", "$vmpgCode"), query = localVariableQuery
        )
        val response = request<PaginatedListAmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListAmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding AMPs by group with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param vmpgId vmpgCode 
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListAmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedAmpsByGroupId(vmpgId: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListAmpDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/amp/byGroupId/{vmpgId}".replace("{" + "vmpgId" + "}", "$vmpgId"), query = localVariableQuery
        )
        val response = request<PaginatedListAmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListAmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding AMPs by label with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param language language (optional)
     * @param label label (optional)
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId An amp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListAmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedAmpsByLabel(language: kotlin.String? = null, label: kotlin.String? = null, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListAmpDto {
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"), "label" to listOf("$label"), "startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/amp", query = localVariableQuery
        )
        val response = request<PaginatedListAmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListAmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding AMPs by vmp code with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param vmpCode vmpCode 
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A amp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListAmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedAmpsByVmpCode(vmpCode: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListAmpDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/amp/byVmpCode/{vmpCode}".replace("{" + "vmpCode" + "}", "$vmpCode"), query = localVariableQuery
        )
        val response = request<PaginatedListAmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListAmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding AMPs by vmp id with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param vmpId vmpgCode 
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A amp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListAmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedAmpsByVmpId(vmpId: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListAmpDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/amp/byVmpId/{vmpId}".replace("{" + "vmpId" + "}", "$vmpId"), query = localVariableQuery
        )
        val response = request<PaginatedListAmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListAmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding NMPs by label with pagination.
     * Returns a paginated list of NMPs by matching label. Matches occur per word
     * @param language language (optional)
     * @param label label (optional)
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListNmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedNmpsByLabel(language: kotlin.String? = null, label: kotlin.String? = null, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListNmpDto {
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"), "label" to listOf("$label"), "startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/nmp", query = localVariableQuery
        )
        val response = request<PaginatedListNmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListNmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding codes by code, type and version with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param language language (optional)
     * @param label label (optional)
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmpgroup document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListVmpGroupDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedVmpGroupsByLabel(language: kotlin.String? = null, label: kotlin.String? = null, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListVmpGroupDto {
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"), "label" to listOf("$label"), "startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/vmpgroup", query = localVariableQuery
        )
        val response = request<PaginatedListVmpGroupDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListVmpGroupDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding VMPs by group with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param vmpgCode vmpgCode 
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListVmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedVmpsByGroupCode(vmpgCode: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListVmpDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/vmp/byGroupCode/{vmpgCode}".replace("{" + "vmpgCode" + "}", "$vmpgCode"), query = localVariableQuery
        )
        val response = request<PaginatedListVmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListVmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding VMPs by group with pagination.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @param vmpgId vmpgId 
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListVmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedVmpsByGroupId(vmpgId: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListVmpDto {
        val localVariableQuery: MultiValueMap = mapOf("startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/vmp/byGroupId/{vmpgId}".replace("{" + "vmpgId" + "}", "$vmpgId"), query = localVariableQuery
        )
        val response = request<PaginatedListVmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListVmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Finding VMPs by label with pagination.
     * Returns a paginated list of VMPs by matching label. Matches occur per word
     * @param language language (optional)
     * @param label label (optional)
     * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey (optional)
     * @param startDocumentId A vmp document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListVmpDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findPaginatedVmpsByLabel(language: kotlin.String? = null, label: kotlin.String? = null, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): PaginatedListVmpDto {
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"), "label" to listOf("$label"), "startKey" to listOf("$startKey"), "startDocumentId" to listOf("$startDocumentId"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/vmp", query = localVariableQuery
        )
        val response = request<PaginatedListVmpDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaginatedListVmpDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Samv2 version.
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     * @return SamVersionDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getSamVersion(): SamVersionDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/v"
        )
        val response = request<SamVersionDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SamVersionDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all pharmaceutical forms.
     * 
     * @return kotlin.Array<PharmaceuticalFormDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listPharmaceuticalForms(): kotlin.Array<PharmaceuticalFormDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/pharmaform"
        )
        val response = request<kotlin.Array<PharmaceuticalFormDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PharmaceuticalFormDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all substances.
     * 
     * @return kotlin.Array<SubstanceDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun listSubstances(): kotlin.Array<SubstanceDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/be_samv2/substance"
        )
        val response = request<kotlin.Array<SubstanceDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SubstanceDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
