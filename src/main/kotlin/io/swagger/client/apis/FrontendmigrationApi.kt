/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.DocIdentifier
import io.swagger.client.models.FrontEndMigrationDto

import io.swagger.client.infrastructure.*

class FrontendmigrationApi(basePath: kotlin.String = "https://kraken.icure.dev") : ApiClient(basePath) {

    /**
     * Creates a front end migration
     * 
     * @param body  
     * @return FrontEndMigrationDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createFrontEndMigration(body: FrontEndMigrationDto): FrontEndMigrationDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/rest/v1/frontendmigration"
        )
        val response = request<FrontEndMigrationDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FrontEndMigrationDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a front end migration
     * 
     * @param frontEndMigrationId  
     * @return DocIdentifier
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteFrontEndMigration(frontEndMigrationId: kotlin.String): DocIdentifier {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/rest/v1/frontendmigration/{frontEndMigrationId}".replace("{" + "frontEndMigrationId" + "}", "$frontEndMigrationId")
        )
        val response = request<DocIdentifier>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocIdentifier
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a front end migration
     * 
     * @param frontEndMigrationId  
     * @return FrontEndMigrationDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getFrontEndMigration(frontEndMigrationId: kotlin.String): FrontEndMigrationDto {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/frontendmigration/{frontEndMigrationId}".replace("{" + "frontEndMigrationId" + "}", "$frontEndMigrationId")
        )
        val response = request<FrontEndMigrationDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FrontEndMigrationDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets an front end migration
     * 
     * @param frontEndMigrationName  
     * @return kotlin.Array<FrontEndMigrationDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getFrontEndMigrationByName(frontEndMigrationName: kotlin.String): kotlin.Array<FrontEndMigrationDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/frontendmigration/byName/{frontEndMigrationName}".replace("{" + "frontEndMigrationName" + "}", "$frontEndMigrationName")
        )
        val response = request<kotlin.Array<FrontEndMigrationDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FrontEndMigrationDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets a front end migration
     * 
     * @return kotlin.Array<FrontEndMigrationDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getFrontEndMigrations(): kotlin.Array<FrontEndMigrationDto> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/rest/v1/frontendmigration"
        )
        val response = request<kotlin.Array<FrontEndMigrationDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FrontEndMigrationDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Modifies a front end migration
     * 
     * @param body  
     * @return FrontEndMigrationDto
     */
    @Suppress("UNCHECKED_CAST")
    fun modifyFrontEndMigration(body: FrontEndMigrationDto): FrontEndMigrationDto {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/rest/v1/frontendmigration"
        )
        val response = request<FrontEndMigrationDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FrontEndMigrationDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
